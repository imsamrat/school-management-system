// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication (supports all roles)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(STUDENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship to role-specific profiles
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  staffProfile   StaffProfile?

  // Relationships for activities
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  announcements    Announcement[]

  @@map("users")
}

// Role enumeration
enum Role {
  ADMIN
  STAFF
  TEACHER
  STUDENT
}

// Student-specific profile
model StudentProfile {
  id       String @id @default(cuid())
  userId   String @unique
  rollNo   String @unique
  classId  String?
  section  String?
  parentName String?
  parentPhone String?
  address  String?
  dateOfBirth DateTime?
  admissionDate DateTime @default(now())
  profileImage String? // URL or path to profile image
  emergencyContact String? // Emergency contact information

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  class    Class?  @relation(fields: [classId], references: [id])

  // Student activities
  attendances   Attendance[]
  grades        Grade[]
  feeRecords    FeeRecord[]
  assignments   AssignmentSubmission[]

  @@map("student_profiles")
}

// Teacher-specific profile
model TeacherProfile {
  id           String @id @default(cuid())
  userId       String @unique
  employeeId   String @unique
  department   String?
  qualification String?
  experience   String?
  phone        String?
  address      String?
  joinDate     DateTime @default(now())
  profileImage String? // URL or path to profile image
  bio          String? // Teacher biography

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Teacher responsibilities
  classes      Class[]
  subjects     Subject[]
  attendances  Attendance[]
  assignments  Assignment[]
  grades       Grade[]

  @@map("teacher_profiles")
}

// Staff-specific profile
model StaffProfile {
  id         String @id @default(cuid())
  userId     String @unique
  employeeId String @unique
  department String?
  position   String?
  phone      String?
  address    String?
  joinDate   DateTime @default(now())

  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff_profiles")
}

// Class model
model Class {
  id          String @id @default(cuid())
  name        String // e.g., "10th Grade"
  section     String // e.g., "A", "B"
  teacherId   String?
  academicYear String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())

  teacher     TeacherProfile? @relation(fields: [teacherId], references: [id])
  
  // Class relationships
  students    StudentProfile[]
  subjects    Subject[]
  attendances Attendance[]
  assignments Assignment[]
  timetables  Timetable[]

  @@unique([name, section, academicYear])
  @@map("classes")
}

// Subject model
model Subject {
  id        String @id @default(cuid())
  name      String // e.g., "Mathematics", "Physics"
  code      String @unique // e.g., "MATH101"
  classId   String
  teacherId String?
  credits   Int    @default(1)
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  class       Class            @relation(fields: [classId], references: [id])
  teacher     TeacherProfile?  @relation(fields: [teacherId], references: [id])
  
  // Subject activities
  attendances Attendance[]
  assignments Assignment[]
  grades      Grade[]
  timetables  Timetable[]

  @@map("subjects")
}

// Attendance model
model Attendance {
  id        String @id @default(cuid())
  studentId String
  classId   String
  subjectId String?
  teacherId String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   StudentProfile @relation(fields: [studentId], references: [id])
  class     Class          @relation(fields: [classId], references: [id])
  subject   Subject?       @relation(fields: [subjectId], references: [id])
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])

  @@unique([studentId, classId, subjectId, date])
  @@map("attendances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// Assignment model
model Assignment {
  id          String @id @default(cuid())
  title       String
  description String?
  classId     String
  subjectId   String
  teacherId   String
  dueDate     DateTime
  maxMarks    Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  class       Class            @relation(fields: [classId], references: [id])
  subject     Subject          @relation(fields: [subjectId], references: [id])
  teacher     TeacherProfile   @relation(fields: [teacherId], references: [id])
  
  submissions AssignmentSubmission[]

  @@map("assignments")
}

// Assignment Submission model
model AssignmentSubmission {
  id           String @id @default(cuid())
  assignmentId String
  studentId    String
  content      String?
  filePath     String?
  marksObtained Int?
  feedback     String?
  submittedAt  DateTime @default(now())
  gradedAt     DateTime?

  assignment   Assignment     @relation(fields: [assignmentId], references: [id])
  student      StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Grade model
model Grade {
  id        String @id @default(cuid())
  studentId String
  subjectId String
  teacherId String
  examType  String // "Quiz", "Midterm", "Final", etc.
  maxMarks  Int
  obtainedMarks Int
  grade     String? // A, B, C, etc.
  remarks   String?
  examDate  DateTime
  published Boolean @default(false) // Whether grade is visible to students
  createdAt DateTime @default(now())

  student   StudentProfile @relation(fields: [studentId], references: [id])
  subject   Subject        @relation(fields: [subjectId], references: [id])
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id])

  @@map("grades")
}

// Fee Record model
model FeeRecord {
  id          String @id @default(cuid())
  studentId   String
  feeType     String // "Tuition", "Library", "Lab", etc.
  amount      Decimal
  dueDate     DateTime
  paidDate    DateTime?
  status      FeeStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  remarks     String?
  createdAt   DateTime @default(now())

  student     StudentProfile @relation(fields: [studentId], references: [id])

  @@map("fee_records")
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}

// Timetable model
model Timetable {
  id        String @id @default(cuid())
  classId   String
  subjectId String
  dayOfWeek Int // 1 = Monday, 7 = Sunday
  startTime String // "09:00"
  endTime   String // "10:00"
  room      String?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())

  class     Class   @relation(fields: [classId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([classId, subjectId, dayOfWeek, startTime])
  @@map("timetables")
}

// Message model for communication
model Message {
  id         String @id @default(cuid())
  senderId   String
  receiverId String
  title      String
  content    String
  isRead     Boolean @default(false)
  createdAt  DateTime @default(now())

  sender     User @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

// Announcement model
model Announcement {
  id        String @id @default(cuid())
  authorId  String
  title     String
  content   String
  targetRole Role? // If null, visible to all roles
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User @relation(fields: [authorId], references: [id])

  @@map("announcements")
}
